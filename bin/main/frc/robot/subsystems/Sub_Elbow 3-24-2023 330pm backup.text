// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import frc.robot.Constants;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.DutyCycleEncoder;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;


/**
 *
 */
public class Sub_Elbow extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    private static CANSparkMax static_leftElbow;
    private CANSparkMax leftElbow;
    //private CANSparkMax rightElbow;

    static DutyCycleEncoder static_elbowEncoder;
    DutyCycleEncoder elbowEncoder;
    static boolean alreadyCreated = false;

    public PIDController pidElbow;
    public double zero;
    
    /**
    *
    */
    public Sub_Elbow() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    // create an object for the elbow encoder and the spark maxes.  Each of these is a singleton.  So if it's created
    // multiple times, we return the same object as before.
    if (Sub_Elbow.alreadyCreated == false)
    {
        // allocate the static elbow encoder and left spark and set the flag to true
        Sub_Elbow.alreadyCreated = true;
        Sub_Elbow.static_elbowEncoder = new DutyCycleEncoder(1);
        Sub_Elbow.static_leftElbow = new CANSparkMax(Constants.leftElbowPort, MotorType.kBrushless);
    
    }
    // set this object's elbowEncoder and leftElbow to the static one (which may just have been created)
    elbowEncoder = Sub_Elbow.static_elbowEncoder;
    leftElbow = Sub_Elbow.static_leftElbow;


    //leftElbow = new CANSparkMax(Constants.leftElbowPort, MotorType.kBrushless);
    //rightElbow = new CANSparkMax(Constants.rightElbowPort, MotorType.kBrushless);   
    
    pidElbow = new PIDController(2, 0.1, 0.05);
}

    public void Elbow_Out(){
        leftElbow.set(1);
        //rightElbow.set(1);
    }

    public void Elbow_In(){
        leftElbow.set(-1);
        //rightElbow.set(-1);
    }

    public void Elbow_Stop() {
        leftElbow.set(0);
        //rightElbow.set(0);
        pidElbow = new PIDController(2, 0.1, 0.05);
    }

    public void Elbow_Custom(double i) {
        leftElbow.set(-i);
        //rightElbow.set(i);
    }

    public void Elbow_PID_Auto() {
        zero = 0.694915692372892;
        double error = ((double) elbowEncoder.get());
        double pidOut = pidElbow.calculate(error, zero);
        SmartDashboard.putNumber("Elbow Zero", zero);
        SmartDashboard.putNumber("PID Elbow Output", pidOut);
        Elbow_Custom(pidOut);
    }

    public void Elbow_PID_GroundPickup() {
        zero = 0.579084639227116;
        double error = ((double) elbowEncoder.get());
        double pidOut = pidElbow.calculate(error, zero);
        SmartDashboard.putNumber("Elbow Zero", zero);
        SmartDashboard.putNumber("PID Elbow Output", pidOut);
        Elbow_Custom(pidOut);
    }

    public void Elbow_PID_Target() {
        zero = 0.459084639227116;
        double error = ((double) elbowEncoder.get());
        double pidOut = pidElbow.calculate(error, zero);
        SmartDashboard.putNumber("Elbow Zero", zero);
        SmartDashboard.putNumber("PID Elbow Output", pidOut);
        Elbow_Custom(pidOut);
    }

    public void Elbow_PID_MidNode() {
        zero = 0.405633111140828;
        double error = ((double) elbowEncoder.get());
        double pidOut = pidElbow.calculate(error, zero);
        SmartDashboard.putNumber("Elbow Zero", zero);
        SmartDashboard.putNumber("PID Elbow Output", pidOut);
        Elbow_Custom(pidOut);
    }

    public void Elbow_PID_SubPickup() {
        zero = 0.47053401176335;
        double error = ((double) elbowEncoder.get());
        double pidOut = pidElbow.calculate(error, zero);
        SmartDashboard.putNumber("Elbow Zero", zero);
        SmartDashboard.putNumber("PID Elbow Output", pidOut);
        Elbow_Custom(pidOut);
    }

    @Override
    public void periodic() {
        double error = ((double) elbowEncoder.get());
        SmartDashboard.putNumber("Elbow Encoder", error);
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

}

