// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.RunCommand;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;

/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

// The robot's subsystems
    public final Sub_LimeLight m_sub_LimeLight = new Sub_LimeLight();
    public final Sub_Claw m_sub_Claw = new Sub_Claw();
    public final Sub_Elbow m_sub_Elbow = new Sub_Elbow();
    public final Sub_Shoulder m_sub_Shoulder = new Sub_Shoulder();
    public final Sub_Drivetrain m_sub_Drivetrain = new Sub_Drivetrain();

// Joysticks

// Joysticks
  private final XboxController controller = new XboxController(Constants.controllerPort);
  private final Joystick Joystick = new Joystick(Constants.joystickPort);


  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  //Drivetrain code. This config is very import to stop it from messing with the auto code
  // this resets the curret command. When the robot is restarted the old command will still be running
  public void startDrivetrain() {
    if (m_sub_Drivetrain.getCurrentCommand() != null) {
      m_sub_Drivetrain.getCurrentCommand().cancel();
    }
    m_sub_Drivetrain.setDefaultCommand(
        new RunCommand(() -> m_sub_Drivetrain.DrivingNow(Joystick.getRawAxis(2) *
            0.9, Joystick.getRawAxis(1) * 0.75),
            m_sub_Drivetrain));
  }
  public void clearDrivetrain() {
    if (m_sub_Drivetrain.getCurrentCommand() != null) {
      m_sub_Drivetrain.setDefaultCommand(new RunCommand(() -> {
      }, m_sub_Drivetrain));
    }
  }

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
    // Configure the button bindings
    configureButtonBindings();


    //Choose auto
    //WE SHOULD BE USING SMARTDASBOARD DROPDOWN
    m_chooser.setDefaultOption("Autonomous Command", new AutoCmd_Autonomouse());

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */



  private void configureButtonBindings() {
  // Create some buttons
    new JoystickButton(controller, 4).whileTrue(new Cmd_PID_Target(m_sub_Elbow, m_sub_Shoulder));
    new JoystickButton(controller, 2).whileTrue(new Cmd_PID_GroundPickup(m_sub_Elbow, m_sub_Shoulder));

    new JoystickButton(controller, 3).whileTrue(new Cmd_ShoulderOut(m_sub_Shoulder));
    new JoystickButton(controller, 1).whileTrue(new Cmd_ShoulderIn(m_sub_Shoulder));

    new JoystickButton(controller, 6).whileTrue(new Cmd_ClawCone(m_sub_Claw));
    new JoystickButton(controller, 8).whileTrue(new Cmd_ClawCube(m_sub_Claw));
    new JoystickButton(controller, 9).whileTrue(new Cmd_ClawStop(m_sub_Claw));

    //new JoystickButton(controller, 2).whileTrue(new Cmd_Elbow_PID_Auto(m_sub_Elbow));
    new JoystickButton(controller, 5).whileTrue(new Cmd_PID_SubPickup(m_sub_Elbow, m_sub_Shoulder));
    new JoystickButton(controller, 7).whileTrue(new Cmd_PID_MidNode(m_sub_Elbow, m_sub_Shoulder));
  }

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

